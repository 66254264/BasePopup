apply plugin: 'maven'
apply plugin: 'signing'


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

def getLocalProperty(key) {
    if (ext.has(key)){
        return ext[key]
    }
    return ""
}

def isReleaseBuild() {
    return !rootProject.ext.candy
}

def getReleaseRepositoryUrl() {
    return "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

def configurePom(pom) {
    pom.groupId = rootProject.ext.group
    pom.artifactId = rootProject.ext.pkg_name
    pom.version = rootProject.ext.versionName

    pom.project {
        name = rootProject.ext.pkg_name
        packaging = 'aar'
        description = 'Android下打造通用便捷的PopupWindow'
        url 'https://github.com/razerdp/BasePopup'

        scm {
            url = 'https://github.com/razerdp/BasePopup'
            connection = 'https://github.com/razerdp/BasePopup.git'
            developerConnection = 'https://github.com/razerdp/BasePopup.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'razerdp'
                name 'razerdp'
                email 'razerdp123@gmail.com'
            }
        }
    }
    pom.withXml {
        asNode().dependencies.'*'.each {
            if (it.scope.text() == 'test') {
                it.delete
            }
        }
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()) {
                    authentication(userName: getLocalProperty('ossrhUsername'), password: getLocalProperty('ossrhPassword'))
                }
                configurePom(pom)
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
    allprojects {
        tasks.withType(Javadoc) {
            options {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                links "https://developer.android.google.cn/reference/"
            }
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
    if (JavaVersion.current().isJava9Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addBooleanOption('html5', true)
            }
        }
    }
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}